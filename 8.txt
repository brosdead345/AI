from queue import PriorityQueue

# Define the goal state
GOAL_STATE = [1, 2, 3, 4, 5, 6, 7, 8, 0]

# Define the possible moves
moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]
moves_2 = {(0, 1):'right', (0, -1):'left', (1, 0):'down', (-1, 0):'up'}

# Define the heuristic function (Misplaced Tiles)
def heuristic(puzzle):
    misplaced = sum(1 for i, j in zip(puzzle, GOAL_STATE) if i != j)
    return misplaced

# Define a class to represent the puzzle state
class PuzzleState:
    def __init__(self, puzzle, parent=None, action=None):
        self.puzzle = puzzle
        self.parent = parent
        self.action = action
        self.g = 0
        self.h = heuristic(puzzle)

    def __lt__(self, other):
        return (self.g + self.h) < (other.g + other.h)

# Define the A* search algorithm
def a_star(initial_state):
    open_set = PriorityQueue()
    closed_set = set()

    initial_node = PuzzleState(initial_state)
    open_set.put((0, initial_node))

    while not open_set.empty():
        _, current_node = open_set.get()

        if current_node.puzzle == GOAL_STATE:
            path = []
            actions = []
            heuristic_values = []
            while current_node:
                path.append(current_node.puzzle)
                actions.append(current_node.action)
                heuristic_values.append(current_node.h)
                current_node = current_node.parent
            path.reverse()
            actions.reverse()
            heuristic_values.reverse()
            return path, actions, heuristic_values

        closed_set.add(tuple(current_node.puzzle))

        for move in moves:
            new_puzzle = current_node.puzzle[:]
            zero_index = new_puzzle.index(0)
            row, col = zero_index // 3, zero_index % 3
            new_row, new_col = row + move[0], col + move[1]

            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_zero_index = new_row * 3 + new_col
                new_puzzle[zero_index], new_puzzle[new_zero_index] = new_puzzle[new_zero_index], new_puzzle[zero_index]

                if tuple(new_puzzle) not in closed_set:
                    child_node = PuzzleState(new_puzzle, current_node, move)
                    child_node.g = current_node.g + 1
                    open_set.put((child_node.g + child_node.h, child_node))

    return None, None, None

# Define the print_puzzle function
def print_puzzle(puzzle):
    for i in range(3):
        for j in range(3):
            print(puzzle[i * 3 + j], end=' ')
        print()

# Rest of your code remains unchanged

# Example usage:
puzzle_input = input("Enter your puzzle (e.g., '1 2 3 4 5 6 7 0 8'): ")
puzzle_input_list = puzzle_input.split()
initial_state = [int(val) for val in puzzle_input_list]

path, actions, heuristic_values = a_star(initial_state)

if path:
    print("Initial state:")
    print_puzzle(path[0])
    print()

    for i in range(1, len(path)):
        print("Move", moves_2.get(actions[i]))
        print_puzzle(path[i])
        print("Heuristic value:", heuristic_values[i])
        print()

    if path[-1] == GOAL_STATE:
        print("Puzzle solved!")
        print("Moves:", [moves_2.get(action) for action in actions if action])
    else:
        print("No solution found.")
else:
    print("No solution found.")
